00:00

[Eben]: Thankyou guys. So, my name is Eben Upton, I run a thing based in the UK called the Raspberry Pi Foundation. Ah, we make little computers for kids. 

Now normally I try to avoid inflicting death by powerpoint on people, but... We were so close, yesterday was pi day so I really couldn't resist a moderately - ah, what are we gonna do here?

00:26 [from offscreen]: We need your laptop on 1024x768; you're on 800x600.

[Eben] Damnation.

[audience laughs]

[Eben] This wouldn't have happened with a Raspberry Pi.

[more laughter]

[Eben] Aah, Windows 7, what do I do..?

[laughter]

[Eben] There will be a short pause, possibly a long pa - oh, let's have a look. See, so it's thinking 10 by 7. Can you toggle it to the main screen and see what happens?

01:03 [from offscreen] It's good.

[Eben]: Is it good? We're good. Outstanding. And back to the presentation.

So, um, I couldn't resist doing a moderately pi themed talk, a talk themed around everyone's favourite irrational number. So what I'm going to try and do, we'll start off by talking about 1. Um, I'd like to talk to you for a few minutes about what Raspberry Pi is, it's like one big story - what Raspberry Pi is, why we're doing it.

For me, Raspberry Pi has been about a 7 year journey now, starting with my time as what we call a director of studies at the university in Cambridge. Now the role of a director of studies is to organise the undergraduate teaching for a subject at one of our thirty colleges, and also to ensure a supply of undergraduates in the future. So every December we get a lot of high-school students come in - ah, we *used* to get a lot of high-school students come in to apply for our course.

Now, when I went to Cambridge in 1996, we had a fairly typical oversubscription ratio of about 6:1, so in order to get a place in the computer science {trackpass?} you had to beat your way through, ah, you had to beat out 5 other guys, and those 5 other guys, they were often people who had a very very deep level of understanding of what computers did. They were people who had been programming maybe since they were 10. People who had had their Commodore 64s, or their Timexes, or in the UK, machines like the BBC Microcomputer which is certainly what I grew up with. These were people who maybe had bought these machines as children to play computer games on. Or they'd built or bought or been bought these machines by their parents to do schoolwork on. 

But all of these machines had one thing in common, and that was that when you turned them on, they went 'beep' (well, mine went beep), and they gave you a programming prompt and the first thing you had to do if you wanted to play games on these machines or you wanted to start a wordprocessor and do schoolwork - the first thing you had to choose to do was to choose *not* to program the computer. And what this meant was that everyone of my age in the UK who had any aptitude for computing or any interest in computing had a chance to discover that they had that interest, and they had a platform generally in their bedrooms that they could hack on for many hours a night, that they could use to develop those skills. And what this meant was that virtually everybody I knew at school at least knew how to write that 2-line program:

10 PRINT "I AM THE BEST"
20 GOTO 10

...or something a lot filthier, and then to go into a local computer store, type it into all of the machines and then hit 'enter' on all of the machines and run out of the door. It was a simpler time in the 1980s, we used to make our own entertainment.

[audience laughs]

03:46 [Eben]: And the upshot of this was that at the university in Cambridge, we'd gotten fat and happy on this stream of incredibly intelligent, incredibly talented kids who came in the door at the age of 18 - the Cambridge course is fairly famous for having very short terms; the better the university in the UK the less time you actually spend there. Um, what this means is over the course of three years, we have 60 weeks of contact time to turn you from a high-school student into somebody who can start an english 3-year PHD programme. That meant it was extremely useful to us to be able to rely on a certain level of ability, and a certain level of knowledge when people came in the door, and in fact the first thing we had to do with a lot of these kids was we had to convince them that they didn't know everything. We had a fantastic tool called functional programming, standard ML for doing this.

04:30 [audience laughs]

[Eben]: Woo! Language wars!

[applause]

[Eben]: And so we beat these kids (and I was one of those kids); the kids were beaten over the head for the first 8 weeks of the course, and when they were lying there whimpering, then we can start to teach them the things they need to know. [laughs] 

People absolutely need to know functional programming. Um, so [laughs], so by the time I went through the PHD programme and by the time I was interviewing people in 2005, the picture had changed radically. So we'd gone from having 500 applicants for our 80 or 90 places, to having more like 200-250. And while that's still a reasonable ratio, it was starting to get a little bit slim. It was starting to look like we might not be able to find out 80 or 90 kids. And while we were still able, and to this day we can still find 80 or 90 people to come and study on the course who are every bit as intelligent as those people were back in the mid-1990s, what they lack these days is they lack that built-in, kind of hacker knowledge of what the machine is doing. So we had to spend quite a lot of the start of our 60 weeks building these people up to a level that we'd previously been able to assume. 

So, back in 2006, a group of us at the university started to wonder why this had happened, and we started to wonder if there was anything we could do about it. And the theory that we came up with was that what had happened was that those 8-bit machines that we all had as children had gone away. That that ecosystem had been eaten from below by games consoles - games consoles are not only not programmable, but they are *designed* to not be programmable. Their business model forces them to be unprogrammable pieces of hardware because the platform holder needs to be able to recover the subsidy that they've applied to the platform. 

And then they'd been eaten from above by the PC. Now the PC is an awesomely programmable piece of hardware - it's, as a programming environment, far more sophisticated and user-friendly than the machines that we were used to in the 1980s. What had changed was the choice architecture. What had changed was if you get a PC, you have to choose to program the PC - you have to choose to go and get the tools, you have to choose to go and get the documentation. And that's a tiny little energy barrier, but it's a big enough energy barrier that it just chopped the legs off our pipeline of skilled applicants.

So we thought 'well, there's a niche, maybe we can make a thing to fit in this niche'. And we had an idea that the thing to fit in this niche, in kids' bedrooms, had to be four things: 

First of all, it obviously had to be programmable to be of use to us. 

Secondly, it had to be interesting - we had to remember that kids were buying these machines in the 1980s - I bought mine in the 1980s to play (well, I bought mine to program on) - but a lot of people bought their computers in order to play games on or to do their schoolwork on, so it had to be able to do something else. It had to not just be a programming device. For us what that meant - 'interesting' meant games, 'interesting' meant graphics, 'interesting' meant video.

Um, it had to be robust. We wanted something that was small and robust - something that could be shoved into a schoolbag and taken out of the schoolbag 100 times and not break. 

Finally we wanted to have something that was cheap. Now, we were aware that we were going to be asking people to go out and buy a particular piece of hardware in order to get this programming experience therefore we couldn't, we just could not make it expensive. We looked around and our idea of cheap was a school textbook - you can ask children to buy school textbooks. So we picked this $25 price, now that just shows that we know nothing about what school textbooks cost -

07:54 [audience laughter]

[eben] - ah, I think if we had had a more accurate understanding of what textbooks cost then we would have had a much easier job of the engineering over the following few years.

[more laughter]

[eben] Um, and so we set to pretty much this $25 - $25 came before anything else. So $25 is the price of the cheapest Raspberry Pi we call the model A Raspberry Pi. $25 came before pretty much anything else, and we spent a long time playing around trying to find what we could fit into $25. And the first things we were building were very very similar to Arduinos which I'm sure lots of people in the room have used. Um, based on microcontrollers. Um, you can get - you can get a really nice - you can actually trick a microcontroller into driving an old standard definition television, so you can get a really nice sort of 8-bit microcomputer experience out of an atmel/atmega microcontroller. But this failed a number of our tests. And the lovely thing about this is (and I built one of these myself) - the lovely thing about these platforms is that you can build them yourself on veroboard. You know, you can sit down on a rainy afternoon and at the end of the afternoon you can walk away with a computer. And it certainly meets the $25 goal. What it doesn't meet is this requirement that it should be interesting to children, right? It's interesting to me because I already know how to program and I like geeky toys. But it has to be interesting to children. So we kind of abandoned that idea.

About this time I went to work for a company called Broadcom, and I'm still a salaried employee of Broadcom although I spend most of my time doing this sort of thing now. Um, but, um, well I went to work for a company called Broadcom - Broadcom makes a lot of different chips for communications and stuff and one of the things that we make is chips for cellphones, and it turns out that I was struck by - and these cost about the same as microcontrollers - and I was sturck that if you are a cellphone company, what your ten dollars will buy you is very different from what your ten dollars will buy you if you go to Digikey, in the way of processing capabilities. And so this group of us, we started to look and we started to see whether we could build something on one of these platforms.

[09:44] In about 2008 we had in our hands, based on a mobile phone graphics processor that we'd developed in Cambridge, we had a device which we thought was almost good enough. This was a device which didn't have an open processor - it had a closed, proprietory RISC core in it. And we ported C Python to it. And we had what we thought was what we wanted all along, which was a machine that booted into a widely-known, popular educational programming language, in this case Python. And this thing just looked great. It hit our $25 price point, it could play 720p video, it had a nice powerful graphics processor on it, we'd arranged Python bindings for all of these features, it was a really fantastic little platform. And you know, we really thought this was a go. And so this group who'd been doing this informally got together and we said 'well let's start up a foundation to promote this' and we kicked around a lot of names - we came up with this name 'Raspberry Pi' in the end - the 'Pi' in 'Raspberry pi' is the 'Py' in 'Python', um, misspelled, so I've had to defend my spelling for the last 4-and-a-half years. We really thought that 'Pi' was going to make for a fantastic logo, and we have never used that possibility, but by the time we realised we weren't going to do that we'd frozen the name. 

So we were trundling along. But one of the problems I think we found was that we had to write everything ourselves - this was a very closed platform. Okay, we'd ported an open, well-known, popular interpretive language onto it, but we had to write everything ourselves - we had to write our own network drivers and our own SD card drivers and all this stuff, and so it wasn't quite there. And then we were very lucky that a couple of years later a version of broadly the same chip appeared that I had managed to cram an ARM11 into the corner of - there are advantages to being on the chip design team - 

[audience laughs]

[eben]: - 'we absolutely must have an ARM11 in this chip - for unspecified business reasons '

[more laughter, applause]

[eben]: ...and we got this chip back, and it was great, and we finally had the thing that we wanted, which was an almost completely - at least on the ARM side - an almost completely open platform; something that could run Linux, and that would mean that we could leverage this enormous investment that the community had made in developing a real operating system - a real operating system that you don't have to pay money for. 

But we were still thinking in a very parochial way - we still had this very parochial idea that what we were going to try and do was get our... The only thing we wanted to do was get our 250 computer science applicants at Cambridge per year. 250 computer science applicants, and maybe for the 80 or 90 that we let in to know a little bit of assembly language. That would have been a really great outcome. And because we were very nostalgic - I don't know how many of you have come across a machine called the BBC Microcomputer? This was the educational microcomputer of choice in the UK in the 1980s sponsored by the British Broadcasting Corporation - and because a number of us on the board at the foundation had a history with the BBC Micro and we were kindof romantic guys, we thought it would be kindof cool to put a BBC sticker on it, and we were going to call it the BBC Nano - we have this lovely brand with the Raspberry Pi that we never ever wanted, and we thought it would be great if we could call it the BBC Nano and we kept going to the BBC and asking if we could, you know - 'could we stick your logo on this?' and they kept saying no, and there were various complicated legal reasons why they had to say no, and our last attempt was in May of 2011 (so nearly 2 years ago), and we went to see a guy called Rory Cellan-Jones who is the senior technology correspondent for the BBC, and we said 'Hey, can we put the BBC logo on it?' and he said 'No' but what he did say then was 'Well I think it's a great idea though - can I take a video of one of you holding up a prototype and talking about the idea?' and so one of my colleagues, a guy called David Braben - one of my fellow trustees who - I don't know if any of you have played the computer game 'Elite'? Who've had your childhoods wasted by 'Elite' - that was David's fault. Um, and there's a 45-second video of him just standing up holding something that looks nothing like a Raspberry Pi and talking about the Raspberry Pi project.

It recieved 70,000 Youtube views in 2 days. And that was a great 2 days for me - I sat there at Broadcom, at work, and didn't do any work. I just sat there pressing F5.

[audience laughs]

13:48 [eben]: You've seen the episode of 'The Simpsons' where Homer gets his console at home and replaces his entire function with one of those nodding birds - I was just pressing F5. And my 'how popular are you' counter was going up and I was feeling great. And at the end of the second day, I went home and I was really buzzing and I sat down opposite my wife - my wife Liz - I sat down opposite her, for dinner, and we had this sudden 'oh, shit!' moment where we realised we'd promised 600,000 people we'd build them a $25 computer and we had no idea how to do it.

[audience laughs]

[eben]: And so 2011 for me was just like one storm of trying to figure out first of all, how we were going to do it at the price - you know, you add up the cost of the chips and it should be about right, but as soon as you start, you know - there are 180 components on a Raspberry Pi, and 2 of those are the chips - and those are the ones that I was thinking of when I was thinking $20-$25 but there's a lot of 1-cent components and 2-cent components and some 10-cent components on that board and that can really add up. So we spent a long time trying to figure out how to fight our way down to $25, or $35 for the one that we launched, which has ethernet and more USB on it. 

And towards the end of the year, we actually had something that we thought we could build at cost. And this was fantastic, and we thought about our 600,000 people and we thought 'well, most of those are rubberneckers, they don't actually want a Raspberry Pi', so what we'll do, we've got a brilliant business model - and I'd just finished an MBA, so I knew all about business models - I thought 'what a great business model - what we'll do is I'll scrape together some cash-' and we scraped together a quarter of a million dollars of capital to run this project - and that's enough to build 10,000 Raspberry Pis, and so what my great business model '-we'll build 10,000 Raspberry Pis, we'll put them on a website, like some sort of shop/store thing, people will buy them, and then after a few months, we'll have run out of our 10,000 Raspberry Pis, and we'll use the money that we got back to build some more Raspberry Pis, that'd be great!' - but then we were starting to get these danger signals - the traffic to our website was creeping up, and the number of people on our forums was creeping up, and to keep people interested - this thing boots from an SD card, right - so we put an SD card image online for people to download just to have a look at. Really buggy early beta software, bit of firmware - I think you could boot it in Qemu. And we had 50,000 downloads of that. And that was the point where we realised that the pool of fans so hardcore that they would download a buggy alpha operating system for a computer that they didn't know when they were able to get and that didn't exist yet was 50,000 people.

And then we thought 'you know, our 10,000 units might only last a week', and it takes 3 months to make them, so we'd be screwed. And then we were very lucky, because we found two companies in the UK - a company called Premier Farnell and a company called RS Components, and they trade out here as 'Newark' and 'Allied', so two very large component distributors, who shared our concern. You know, their customers are engineers - they have an interest in there being a strong engineering base in our country. And so they had the same concerns as us. And because they had these concerns, they were prepared to help us out - not simply by distributing these things, but by manufacturing them for us. So they were prepared to provide the capital, they were prepared to provide the logistics and the first-line customer support. And so we turned ourselves in January of last year, in the two months before launch, we turned ourselved from a very capital-constrained little foundation that was trying to build things into an IP licensing company. So we own the design of the board, and we own the brand and we licence those to those two companies, and they do the heavy lifting. And that's what's enabled us to scale. We were very lucky we did this, because we took 100,000 orders on the first day. 

[17:14] [audience laughs]

[eben]: So the answer to our question was '15 minutes'. Which was nice.

So, we're a year in. We sold our millionth Raspberry Pi at some point last month.

[17:30] [applause]

[17:37]

...So I'll pretend that's what my number 1 stands for, shall I? The 1 stands for one million units sold.

So it's been an incredible year, and one of the wonderful things about this year has been that for the first six months to a year of this project, our website largely documented stuff we were doing to get this device out the door, and then for the next 6-9 months what was documented, was what people like us were doing [indicates the audience] people – the adults, who already have a knowledge of computerswere doing.

One of the really wonderful things for the past six months, the past 3-6 months is the character of the submissions we get to our web site is changing. The character of the submissions we get is changing to be as much as what children do with the Pi, as it is about what adults are doing with the Pi. And that's a really good sign.

So I'm going to inflict on you... [to offstage: Can I have the slide deck back?] ...15-ish cool pictures of stuff. I wasn't able to keep myself to fifteen, but I'll be very quick. [slide of music synthesiser] Projects people do with this, things we never expected. One of the interesting things about the Pi is that - I'm a graphics hacker - I assume that what people would write is graphics demos on this. Hardly anyone has written graphics demos, although if there are any graphics hackers in the room, please do write graphics demos on the Pi and make me happy, but almost everything people have been doing with the Pi has been stuff that I wouldn't have seen coming, so one of the wonderful ones here -people have been using this platform to be doing music. This is a modular-like digital-analog synth you can download called... The name has flown out of my brain, but it's out there. raspberrypisynthesiser.blogspot.com .

[19:14] [slide showing beer brewing equipment]
Beer! So, it turns out there is a big overlap between people who like computer programming and people who like beer. You will not believe the number of people whose first reaction when thinking about what to do with their Raspberry Pi - cannot imagine how many people rise to that challenge by using it to control their brewery, whether that's a little home brewing station, or a proper microbrewery. And there's a thing called BrewPi - there's an open platform - I believe it's based on Python, Arduino, and Raspberry Pi - a platform called BrewPi which is a completely fully integrated microbrewery analysys system running on the Raspberry Pi.

[19:59] [slide showing photographs of a model cow]
Photography. This one I enjoyed. If you want to get really crisp macro photos from your camera, there's a process called focus stacking where you step your camera towards the image and then stack up and basically find the bits that are in focus in each image and then combine them together. Usually you have to buy £1,000 worth of hardware to do this but this is a nice bit of focus stacking done using an old flatbed scanner and a Raspberry Pi and a camera. So that's quite cute.

[20:29] [slide showing modified nintendo system]
Ah, games, yeah. There's an enormous retro gaming community around the Raspberry Pi. The Raspberry Pi is just about powerful enough to emulate that era of computers that I grew up with, and the first era of consoles that I complained about that destroyed the era of computers that I grew up with [laughs]. Like this one - Super Nintendo, damn you!

[20:50] [slide showing colourful city lights]
Okay, lighting. I just put this one in because this one was incredibly cute. w have a lot of little paper - well no, they must be plastic boats on the Thames. There's a dock on the Thames - this is Canary Wharf where a lot of our financial services are in the UK, and there's a little ribbon of boats out there that you can text to and it will change colour. But these sort of art installations seem to be a big thing with Raspberry Pi.

[21:15] [slide showing a toy TARDIS in space]
Ah, this is my favourite one! It's 'Doctor Who' and space and the Raspberry Pi all-in-one. There's a gentleman called Dave Akerman who I met for the first time on Thursday night, but I've known about him for a long time. He does a good line in putting cameras under weather ballons and sending them up to 40km up and taking pictures. And he used to do this with little camcorders and digital still cameras. And about a year ago, just after launch, he started doing this with the Pi. And he's got these wonderful pictures of the Earth from 40km up and he does more and more incredible stuff - like a little polystyrene TARDIS at the same time. 

What's wonderful about this is that this puts 'The Space Programme' within the budgetary reach of every primary school in the world. [audience applause] I defy any child - maybe I'm a child of my time, but I defy any child not to be interested in science, technology, engineering, and mathematics when they can put a TARDIS in space.

[22:19] [slice showing MagPi fan magazine]
We have magazines like in the 1980s, with type in listings like in the 1980s. Type in Python listings [audience cheers]. And there's something about that loop, where the internet is fantastic in a lot of ways for helping people learn to program. I remember as a child, having played 'Elite', wanting to write a little 3D game, wanting to be able to draw lines. And I knew there was a thing called Bresenham's algorithm that could be used to draw lines. And my father was a professor at the university in the UK and so I had access to the universary library. And could I find what Bresenham's algorithm was? Could I . . . hell. And now I find out about Bresenham's algorithm by typing it into Google.

But one of the wonderful things about typing something in as opposed to downloading it from the web, is that there is some sort of feeling that it goes through your eyes and into your brain and out of your fingers, and somehow you own this more than something you just downloaded and run. And generally when you type it in you will make a mistake, and you'll therefore have a 'learning opportunity'. [laughs] I remember those 'learning opportunities' in the 1980s.

So this is a free magazine called 'The MagPi'. I'm hoping that we're going to get print magazines. This one was actually an e-magazine for the first 8 issues, it comes out every month. But it's just transitioned into being a print mag that you can actually buy a subscription for.

[23:40] [slide showing 'owner's manual']
We have books. I don't know if you have Haynes' manuals over here... Yeah? So, Haynes' car manuals were a really big deal in the UK in the era when you opened the bonnet and it had something other than a big sheet of metal with a sticker on saying 'warranty void if opened'. Haynes have had to survive that transition, and the way they've survived it is by producing stuff like 'The Haynes Manual for the Space Shuttle' and 'The Haynes Manual for a Baby', and they've done a Haynes manual for the Raspberry Pi, so we are actually now starting to see an ecosystem appearing with books around the pi, and that's just been really really gratifying. we have at least one O'Reilly book, which means you know you've 'made it'.

[24:24] [slide showing Python]
This one is cool. There's a programming language called Python, This guy has figured out how to get python running in his desktop background. So you can give the focus to the desktop background and start typing python. This is pretty much as close as anyone has got to that primal, 'boots to programming language' experience that I talked about earlier, and I do think that this is incredibly cute.

[24:40] [slide showing paper Pi cases]
Cases - we thought we were going to make 1000 of these maybe, then 10,000. We didn't think we were going to be making enough of these for it to be worth us designing any injection-moulds for cases, so we didn't do a case. What this has meant is that we have left a lot of value out in the ecosystem - there are a lot of people making cases for the Raspberry Pi - a lot of people getting nice little businesses together around making cases and accessories for the Pi. And the cases you get for the Pi cover the entire gamut. They cover the entire market. This is the bottom end of the market, because this is a .PDF. What you do is you print this out onto the thickest paper you can get through your printer without jamming it, and then you fold it up and you've got a case! And it doesn't even catch fire, which is kind of cool. Erm, So I like that - I like 'the punnet'.

[25:29] [slide showing LEGO case]
This one's cool - LEGOs. We had this idea we wanted to build a credit-card sized computer, and the idea of the credit-card size was that it was largely a way of driving our focus on being small and being easy to communicate. You say 'it's a credit-card sized computer'. Of course, it's not a credit-card sized computer, because I didn't pay enough attention to the guy that was doing the board layout - my friend Pete Lomas, also a trustee - and so it's about 1mm off in each direction. By some amazing magical fluke, both the X and Y dimensions of the board turn out to be a multiple of the LEGO basis unit size, very very close. So there's an enormous world of LEGO cases. There's a girl scout called Biz in the UK. She's 11 years old and she posted a tutorial on her website, and there's now a website in the UK where you can buy non-standard LEGO kits, and you can buy this, and because she designed it she gets royalties on it, and because it's an 11-year-old girl she takes those royalties in the form of LEGO [audience applause]. So she's now got more LEGO than me. Just about.

[26:44] [slide showing Pibow case]
And then at the other end of that, Pibow. Jesse's daughter had an absolutely beautiful case for her Raspberry Pi. This is the Pibow. It's designed by the guy that designed our logo for us. It's a stack of bits of perspex, and it as you probably saw from jesse's photograph, the most beautiful case for a computer that I've ever seen.

[27:07] [slide showing child with computer]
We're starting to get some evidence that kids are learning to program on Raspberry Pis. This kid is called Mikey, here you can't see because it's off-camera, but he is learning to program in Scratch, MIT's Scratch which we run. We're spending a lot of the money at the moment on bring performance on scratch up to par on the Pi, so.. 

[27:26] [another slide showing Indian kids having fun with a computer]
We had a really parochial view - we were thinking about solving a problem for Cambridge university, and it turns out kids all over the UK want to learn to program, and it turns out kids all over the world want to learn to program - these kids are in Uttar Pradesh in India, and you can actually see in the bottom-left hand corner that they really are using Scratch to learn to program. And we get sent a lot of these pictures, and there have been some hard days during the development of the Raspberry Pi, there have been some very very tough moments, and it's these sorts of pictures that cheer us up and keep us going, because it gives us some sort of indication that we might actually be accomplishing something with this little computer.

[28:06] [slide showing Minecraft]
We run Minecraft. I don't think I have more to say about that. I said there need to be a 'hook'. There needs to be a hook to get these computers into kids' lives. Apparently a lot of children enjoy playing Minecraft, Mojang have been incredibly helpful they've done a port of the pocket edition of Minecraft to the Pi called 'Minecraft Pi Edition'. The wonderful thing about Minecraft Pi Edition is that the Minecraft process has a socket on the side of it you can bind to from pretty much any programming language - see if you can guess which one most people use - and you can actually text commands into it to interact with the world. And the wonderful thing about this is that it gives kids a reason to program. It gives you a reason to program. You want to build a house, you can be like 'brick, brick, brick, brick, brick...' or you can open the python window which you might be able to see in the background and you can be like:

    for x in range(10):
        for y in range(10):
            brick()


...and then you'll build a little floor. And it's just got that feeling of just very very quick feedback. You know, it gives the child something that's immediately useful to them and it gives it to them quickly.

[29:06] [slide showing world domination]
Try to take over the world.

Try to take over the world - "What are we going to do tonight, Brain?". So, this wonderful map was done by a guy called Ryan Walmsley who was 14 at the time. It's a Google map hack, a self-registration map hack, and it gives you some idea of where the Pis are all going or where the Pis were going when I took this screenshot. You can see that we're a little bit outside our Cambridge comfort zone here, so quite a few in the UK, quite a lot in North America. North America is now our largest, it's been our largest run rate market for the last 3 months. As of last month, it also has our largest install base. Which is fantastic, although really what we would hope for given how many of you there are.

So there are little pockets of strength in South Africa and Australasia. I think we would like to sell a hell of a lot more of these in South America and a hell of a lot more of these in India, but we're getting there. We've got plans for those.

[29:57] [slide showing Sony Factory in Wales]

Starting with Wales, which is where I come from. When we first started to build the Raspberry Pi we did what everyone did, which was to go to China to build it. And we built it in China and a couple of months into our run we got a call from Sony who have a factory in south Wales, and they said 'You know, we think we could build the Pi at the price you need.' and as of September last year, we've been building Pis in the UK at the same price that we could build them in Shenzhen [crowd applauds]. And that for me is a big deal, because I come from around 10 miles away from our factory - that's where I was born. South Wales has - like many areas that used to be the industrial heartland of the developed world - has enormous economic problems. And the ability - you know, we can build the world's cheapest general-purpose computer at the appropriate cost in Wales - is a really fantastic sign for all of us who worry about whether we can have a manufacturing industry in the developed world. So that was a personal one that I really enjoyed.

[31:10]
4. Four. Four things about Python, four reasons why Python is important to us. Our name. We get our name from Python and I will spend the rest of my life defending my ability to spell the name of 'Python', but yeah we owe you our name. 

We owe you our chip. It's a 2835 which is a Broadcom chip that I was on the design team for the GPU. We designed the whole damn thing using Python. When we were designing our shader processor, we designed and verified the vast majority of the multimedia IP in our chip in Python, because it is 100x quicker to do that and then to port the result across to Verilog, than it is to do this stuff in Verilog, because the tools are just better. We just have this idea - 'why are software tools so much better than hardware CAD tools?' It's because it means programmers have to eat their own dog food. So, you know, uh, basic engineers have to eat our dog food. 

Our software. Python, and a number of other interpretive languages have given us the ability to bring into this fairly unusual ARM/Linux space a vast body of very robust existing software, and have it run as well in our world as well as it does in the traditional X86 world. 

And finally our teaching language. We support a lot of teaching languages. For young kids we support languages like LOGO and Scratch. We will always support C and C++ for when people want to get close to the metal. The wonderful thing for us about Python as a teaching language is it gives us a story that we can tell children. We can say 'learn this language in which 'Hello World' is print("Hello World"), and you will be on a smooth curve that leads to the language that all of these companies use to program in'. And there will not be a discontinuity at any point between the moment when you sit down and write that two-line program to spook people in a computer store and the point when you're a professional software engineer. We think that's very important, because any time there's a step in the curve, people fall off the curve.

[33:08]
And I'm very nearly done. Just 3 very quick things I'm thinking about at the moment. Those brackets in hello world. That's shorthand for 'do we make Python run 2.7 or Python 3?' Um, yes - we're going to have to make a choice at some point fairly soon, I think. People are getting confused, because we have things like Pygame has got to be installed for just one of them, and... urgh, it's all horrible. But we will get there.

PyPy. We're big fans of PyPy. I think it's a wonderful idea, I was a big user of Psyco back in the day - these tools are really important. One of the things - we don't have a lot of processing power on the Raspberry Pi and therefore we do spend a lot of effort on just trying to squeeze as much as we can out of the platform we have. And certainly, looking at the performance, PyPy is going to be a big part of our future.

Finally, Boot to Python. Yeah, I showed you the desktop thing. This thing floats around - this idea of having some mode. You know? Trying to get back to that world in which you had to choose not to program. We did have, in 2008 at the point at which we chose our foundation's name, a device that booted to python. And it continues to bump around in our heads - 'how are we gonna do this?' - we haven't really... Well, there's nothing educational about the Pi - it's just a cheap Linux box. We still wonder what the appropriate teaching environment for the Pi is. And we wonder whether it's any of our business. We wonder whether we should just let the community come up with that for us.

[34:40]
So there we are. I think that's all I had. Thank you very much for your time, thank you very much for having me here. Please come visit www.raspberrypi.org, and tell us what you did with your Raspberry Pis.
[crowd applause]
